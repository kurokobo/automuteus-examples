version: "3"

services:
  automuteus:
    # Either:
    # - Use a prebuilt image
    image: automuteus/automuteus:${AUTOMUTEUS_TAG:?err}
    # - Use an old prebuilt image (prior to 6.16.1)
    #image: denverquane/amongusdiscord:${AUTOMUTEUS_TAG:?err}
    # - Build image from local source
    #build: ../automuteus
    # - Build image from github directly
    #build: https://github.com/automuteus/automuteus.git

    restart: always
    environment:
      # These are required and will fail if not present
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN:?err}
      - HOST=${GALACTUS_HOST:?err}
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASS=${POSTGRES_PASS:?err}

      # These Variables are optional
      - WORKER_BOT_TOKENS=${WORKER_BOT_TOKENS:-}
      - EMOJI_GUILD_ID=${EMOJI_GUILD_ID:-}
      - CAPTURE_TIMEOUT=${CAPTURE_TIMEOUT:-}
      - AUTOMUTEUS_LISTENING=${AUTOMUTEUS_LISTENING:-}
      - AUTOMUTEUS_GLOBAL_PREFIX=${AUTOMUTEUS_GLOBAL_PREFIX:-}
      - BASE_MAP_URL=${BASE_MAP_URL:-}

      # Do **NOT** change this
      - REDIS_ADDR=${AUTOMUTEUS_REDIS_ADDR}
      - GALACTUS_ADDR=${GALACTUS_ADDR}
      - POSTGRES_ADDR=${POSTGRES_ADDR}
    depends_on:
      - redis
      - galactus
      - postgres
    volumes:
      - "bot-logs:/app/logs"

  galactus:
    ports:
      # See sample.env for details, but in general, match the GALACTUS_EXTERNAL_PORT w/ the GALACTUS_HOST's port
      - ${GALACTUS_EXTERNAL_PORT:-8123}:${BROKER_PORT}
    image: automuteus/galactus:${GALACTUS_TAG:?err}
    restart: always
    environment:
      # Do **NOT** change these
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN:?err}
      - BROKER_PORT=${BROKER_PORT}
      - REDIS_ADDR=${GALACTUS_REDIS_ADDR}
      - GALACTUS_PORT=${GALACTUS_PORT}
    depends_on:
      - redis

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - "redis-data:/data"

  postgres:
    image: postgres:12-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    volumes:
      - "postgres-data:/var/lib/postgresql/data"

  grafana:
    image: grafana/grafana:${GRAFANA_TAG:?err}
    restart: always
    environment:
      - GF_INSTALL_PLUGINS=petrslavotinek-carpetplot-panel, grafana-piechart-panel
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:?err}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS:?err}
    ports:
      - ${GRAFANA_EXTERNAL_PORT:-3000}:3000
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/dashboard.full.json:/etc/grafana/provisioning/dashboards/dashboard.json
      - grafana-data:/var/lib/grafana

  prometheus:
    image: prom/prometheus:v${PROMETHEUS_TAG:?err}
    restart: always
    # should not be exported externally; uncomment for debugging / testing purposes only.
    #ports:
    #  - 9090:9090
    volumes:
      - ./prometheus/prometheus.full.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  prometheus-galactus-exporter:
    image: quay.io/prometheuscommunity/json-exporter:v${PROMETHEUS_GALACTUS_EXPORTER_TAG:?err}
    restart: always
    # should not be exported externally; uncomment for debugging / testing purposes only.
    #ports:
    #  - 7979:7979
    command:
      - --config.file=/config.yml
    volumes:
      - ./json-exporter/config.yml:/config.yml

  prometheus-docker-node-exporter:
    image: quay.io/prometheus/node-exporter:v${PROMETHEUS_DOCKER_NODE_EXPORTER_TAG:?err}
    # should not be exported externally; uncomment for debugging / testing purposes only.
    #ports:
    #  - 9100:9100
    command:
      - --path.rootfs=/host
      - --collector.disable-defaults
      - --collector.cpu
      - --collector.filesystem
      - --collector.meminfo
    volumes:
      - /:/host:ro,rslave

  prometheus-cadvisor:
    image: gcr.io/cadvisor/cadvisor:v${PROMETHEUS_CADVISOR_TAG:?err}
    restart: always
    # should not be exported externally; uncomment for debugging / testing purposes only.
    #ports:
    #  - 8080:8080
    command:
      - --store_container_labels=false
      - --docker_only=true
      - --disable_root_cgroup_stats=false
      - --disable_metrics=tcp,advtcp,udp,sched,process,hugetlb,disk
      - --global_housekeeping_interval=60s
      - --housekeeping_interval=60s
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      # If you want to run this container on CentOS, Fedora, or RHEL,
      # an additional mount for /cgroup is required.
      #- /cgroup:/cgroup:ro
    # And privileged mode is also reqired for CentOS, Fedora, or RHEL.
    #privileged: true

volumes:
  bot-logs:
  redis-data:
  postgres-data:
  grafana-data:
  prometheus-data:
